import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  MessageSquare, 
  Send, 
  Bot, 
  User, 
  X, 
  Minimize2,
  Phone,
  Mail,
  HelpCircle,
  FileText,
  Clock,
  Languages
} from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

type Language = 'hi' | 'en' | 'od' | 'te' | 'bn';

interface LanguageContent {
  welcome: string;
  placeholder: string;
  quickHelp: string;
  callSupport: string;
  email: string;
  support247: string;
  online: string;
  quickActions: string[];
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState<Language>('hi');
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');

  const languageContent: Record<Language, LanguageContent> = {
    hi: {
      welcome: 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ FRA Help Desk рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рд╡рди рдЕрдзрд┐рдХрд╛рд░ рдЕрдзрд┐рдирд┐рдпрдо 2006 рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? ЁЯМ▓',
      placeholder: 'рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рд▓рд┐рдЦреЗрдВ...',
      quickHelp: 'рдЬрд▓реНрджреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП:',
      callSupport: 'рд╕рд╣рд╛рдпрддрд╛ рдХреЙрд▓ рдХрд░реЗрдВ',
      email: 'рдИрдореЗрд▓',
      support247: '24/7 рд╕рд╣рд╛рдпрддрд╛',
      online: 'рдСрдирд▓рд╛рдЗрди',
      quickActions: [
        "Forest Rights Act 2006 рдХреНрдпрд╛ рд╣реИ?",
        "Individual Forest Rights (IFR)",
        "Community Forest Rights (CFR)", 
        "рдЖрд╡реЗрджрди рдХреА рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪреЗрдВ",
        "рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
        "рднреВрдорд┐ рдкрдЯреНрдЯрд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛"
      ]
    },
    en: {
      welcome: 'Hello! I am your FRA Help Desk Assistant. How can I help you with Forest Rights Act 2006? ЁЯМ▓',
      placeholder: 'Type your message...',
      quickHelp: 'Quick Help:',
      callSupport: 'Call Support',
      email: 'Email',
      support247: '24/7 Support',
      online: 'Online',
      quickActions: [
        "What is Forest Rights Act 2006?",
        "Individual Forest Rights (IFR)",
        "Community Forest Rights (CFR)",
        "Check Application Status",
        "Required Documents",
        "Land Patta Process"
      ]
    },
    od: {
      welcome: 'рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ FRA Help Desk рм╕рм╣рм╛рнЯрмХ | рммрми рмЕрмзрм┐рмХрм╛рм░ рмЕрмзрм┐рмирм┐рнЯрмо 2006 рммрм┐рм╖рнЯрм░рнЗ рмХрм┐рмкрм░рм┐ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐? ЁЯМ▓',
      placeholder: 'рмЖрмкрмгрмЩрнНрмХрм░ рм╕рмирнНрмжрнЗрм╢ рм▓рнЗрмЦрмирнНрмдрнБ...',
      quickHelp: 'рм╢рнАрмШрнНрм░ рм╕рм╣рм╛рнЯрмдрм╛ рмкрм╛рмЗрмБ:',
      callSupport: 'рм╕рм╣рм╛рнЯрмдрм╛ рмХрм▓рнН рмХрм░рмирнНрмдрнБ',
      email: 'рмЗрморнЗрм▓рнН',
      support247: '24/7 рм╕рм╣рм╛рнЯрмдрм╛',
      online: 'рмЕрмирм▓рм╛рмЗрмирнН',
      quickActions: [
        "рммрми рмЕрмзрм┐рмХрм╛рм░ рмЕрмзрм┐рмирм┐рнЯрмо 2006 рмХрмг?",
        "рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рммрми рмЕрмзрм┐рмХрм╛рм░ (IFR)",
        "рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рммрми рмЕрмзрм┐рмХрм╛рм░ (CFR)",
        "рмЖрммрнЗрмжрми рм╕рнНрмерм┐рмдрм┐ рмпрм╛рмЮрнНрмЪ рмХрм░рмирнНрмдрнБ",
        "рмЖрммрм╢рнНрнЯрмХ рмжрм▓рм┐рм▓",
        "рмЬрморм┐ рмкрмЯрнНрмЯрм╛ рмкрнНрм░рмХрнНрм░рм┐рнЯрм╛"
      ]
    },
    te: {
      welcome: 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А FRA Help Desk р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Б. р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓ р░Ър░Яр▒Нр░Яр░В 2006 р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б? ЁЯМ▓',
      placeholder: 'р░ор▒А р░╕р░Вр░жр▒Зр░╢р░╛р░ир▒Нр░ир░┐ р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...',
      quickHelp: 'р░др▒Нр░╡р░░р░┐р░д р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В:',
      callSupport: 'р░╕р░╣р░╛р░пр░В р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      email: 'р░Зр░ор▒Жр░пр░┐р░▓р▒Н',
      support247: '24/7 р░╕р░╣р░╛р░пр░В',
      online: 'р░Жр░ир▒НтАМр░▓р▒Ир░ир▒Н',
      quickActions: [
        "р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓ р░Ър░Яр▒Нр░Яр░В 2006 р░Пр░ор░┐р░Яр░┐?",
        "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (IFR)",
        "р░╕р░ор░╛р░Ьр░┐р░Х р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (CFR)",
        "р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
        "р░Ер░╡р░╕р░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р▒Б",
        "р░нр▒Вр░ор░┐ р░кр░Яр▒Нр░Яр░╛ р░кр▒Нр░░р░Хр▒Нр░░р░┐р░п"
      ]
    },
    bn: {
      welcome: 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ FRA Help Desk рж╕рж╣рж╛ржпрж╝ржХред ржмржи ржЕржзрж┐ржХрж╛рж░ ржЖржЗржи 2006 рж╕ржорзНржкрж░рзНржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯМ▓',
      placeholder: 'ржЖржкржирж╛рж░ ржмрж╛рж░рзНрждрж╛ ржЯрж╛ржЗржк ржХрж░рзБржи...',
      quickHelp: 'ржжрзНрж░рзБржд рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп:',
      callSupport: 'рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж▓ ржХрж░рзБржи',
      email: 'ржЗржорзЗржЗрж▓',
      support247: '24/7 рж╕рж╣рж╛ржпрж╝рждрж╛',
      online: 'ржЕржирж▓рж╛ржЗржи',
      quickActions: [
        "ржмржи ржЕржзрж┐ржХрж╛рж░ ржЖржЗржи 2006 ржХрзА?",
        "ржмрзНржпржХрзНрждрж┐ржЧржд ржмржи ржЕржзрж┐ржХрж╛рж░ (IFR)",
        "рж╕рж╛ржорж╛ржЬрж┐ржХ ржмржи ржЕржзрж┐ржХрж╛рж░ (CFR)",
        "ржЖржмрзЗржжржирзЗрж░ ржЕржмрж╕рзНржерж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи",
        "ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж╛ржЧржЬржкрждрзНрж░",
        "ржЬржорж┐рж░ ржкрж╛ржЯрзНржЯрж╛ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛"
      ]
    }
  };

  // Initialize messages when language changes
  useState(() => {
    setMessages([{
      id: '1',
      type: 'bot',
      content: languageContent[currentLanguage].welcome,
      timestamp: new Date()
    }]);
  });

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');

    // Simulate bot response
    setTimeout(() => {
      const botResponse = getBotResponse(inputValue, currentLanguage);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot', 
        content: botResponse,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  const getBotResponse = (userInput: string, language: Language): string => {
    const input = userInput.toLowerCase();
    
    const responses = {
      hi: {
        fra: 'рд╡рди рдЕрдзрд┐рдХрд╛рд░ рдЕрдзрд┐рдирд┐рдпрдо 2006 рд╡рди рдореЗрдВ рд░рд╣рдиреЗ рд╡рд╛рд▓реЗ рд╕рдореБрджрд╛рдпреЛрдВ рдХреЛ рднреВрдорд┐ рдФрд░ рд╡рди рд╕рдВрд╕рд╛рдзрдиреЛрдВ рдкрд░ рдЕрдзрд┐рдХрд╛рд░ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред рдпрд╣ Individual Forest Rights (IFR), Community Rights (CR), рдФрд░ Community Forest Resource Rights (CFR) рдХреЛ рдорд╛рдиреНрдпрддрд╛ рджреЗрддрд╛ рд╣реИред',
        ifr: 'Individual Forest Rights (IFR): 4 рд╣реЗрдХреНрдЯреЗрдпрд░ рддрдХ рдХреА рдХреГрд╖рд┐ рднреВрдорд┐ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЕрдзрд┐рдХрд╛рд░ред рдЖрд╡реЗрджрди рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ: рдирд┐рд╡рд╛рд╕ рдкреНрд░рдорд╛рдг, рдХреГрд╖рд┐ рдХрд╛рд░реНрдп рдХрд╛ рдкреНрд░рдорд╛рдг, рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рдорд░реНрдердиред',
        cfr: 'Community Forest Resource Rights (CFR): рд╕рдореБрджрд╛рдп рдХреЛ рд╡рди рд╕рдВрд╕рд╛рдзрдиреЛрдВ рдХреЗ рд╕реБрд░рдХреНрд╖рд╛, рдкреНрд░рдмрдВрдзрди рдФрд░ рдЙрдкрдпреЛрдЧ рдХреЗ рдЕрдзрд┐рдХрд╛рд░ред рдЗрд╕рдореЗрдВ рд▓рдШреБ рд╡рдиреЛрдкрдЬ, рдорддреНрд╕реНрдп рдкрд╛рд▓рди, рдЪрд╛рд░рд╛рдЧрд╛рд╣ рд╢рд╛рдорд┐рд▓ рд╣реИрдВред',
        status: 'рдЖрдкрдХреА рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪрдиреЗ рдХреЗ рд▓рд┐рдП: 1) рдЕрдкрдирд╛ Application ID рджреЗрдВ 2) Status Checker рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ 3) рдЕрдкрдиреЗ рдЧрд╛рдВрд╡ рдХреЗ FRO рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред',
        documents: 'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝: 1) рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб 2) рдЬрдирдЬрд╛рддреАрдп рдкреНрд░рдорд╛рдг рдкрддреНрд░ 3) рдирд┐рд╡рд╛рд╕ рдкреНрд░рдорд╛рдг 4) рднреВрдорд┐ рдХрдмреНрдЬреЗ рдХрд╛ рдкреНрд░рдорд╛рдг 5) рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рдорд░реНрдерди рдкрддреНрд░ред',
        default: 'рдореИрдВ рд╡рди рдЕрдзрд┐рдХрд╛рд░ рдЕрдзрд┐рдирд┐рдпрдо 2006 рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд╕реНрдкрд╖реНрдЯ рдХрд░реЗрдВред'
      },
      en: {
        fra: 'Forest Rights Act 2006 grants rights to forest-dwelling communities over land and forest resources. It recognizes Individual Forest Rights (IFR), Community Rights (CR), and Community Forest Resource Rights (CFR).',
        ifr: 'Individual Forest Rights (IFR): Individual rights for agricultural land up to 4 hectares. Required: residence proof, agricultural work proof, community support.',
        cfr: 'Community Forest Resource Rights (CFR): Community rights for protection, management and use of forest resources including minor forest produce, fisheries, grazing.',
        status: 'To check your application status: 1) Provide your Application ID 2) Use Status Checker 3) Contact your village FRO.',
        documents: 'Required documents: 1) Aadhaar Card 2) Tribal Certificate 3) Residence Proof 4) Land possession proof 5) Community support letter.',
        default: 'I can help you with all information related to Forest Rights Act 2006. Please clarify your question.'
      },
      od: {
        fra: 'рммрми рмЕрмзрм┐рмХрм╛рм░ рмЕрмзрм┐рмирм┐рнЯрмо 2006 рммрмирммрм╛рм╕рнА рм╕рморнНрмкрнНрм░рмжрм╛рнЯрмХрнБ рмЬрморм┐ рмПрммрмВ рммрми рм╕рморнНрмкрмж рмЙрмкрм░рнЗ рмЕрмзрм┐рмХрм╛рм░ рмкрнНрм░рмжрм╛рми рмХрм░рнЗред рмПрм╣рм╛ рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рммрми рмЕрмзрм┐рмХрм╛рм░ (IFR), рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рмЕрмзрм┐рмХрм╛рм░ (CR) рмПрммрмВ рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рммрми рм╕рморнНрмкрмж рмЕрмзрм┐рмХрм╛рм░ (CFR) рмХрнБ рм╕рнНрн▒рнАрмХрнГрмдрм┐ рмжрм┐рмПред',
        ifr: 'рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рммрми рмЕрмзрм┐рмХрм╛рм░ (IFR): 4 рм╣рнЗрмХрнНрмЯрм░ рмкрм░рнНрмпрнНрнЯрмирнНрмд рмХрнГрм╖рм┐ рмнрнВрморм┐ рмкрм╛рмЗрмБ рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рмЕрмзрм┐рмХрм╛рм░ред рмЖрммрм╢рнНрнЯрмХ: рммрм╕рммрм╛рм╕ рмкрнНрм░рморм╛рмг, рмХрнГрм╖рм┐ рмХрм╛рм░рнНрмпрнНрнЯрм░ рмкрнНрм░рморм╛рмг, рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рм╕рморм░рнНрмермиред',
        cfr: 'рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рммрми рм╕рморнНрмкрмж рмЕрмзрм┐рмХрм╛рм░ (CFR): рммрми рм╕рморнНрмкрмжрм░ рм╕рнБрм░рмХрнНрм╖рм╛, рмкрм░рм┐рмЪрм╛рм│рмирм╛ рмПрммрмВ рммрнНрнЯрммрм╣рм╛рм░ рмкрм╛рмЗрмБ рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ рмЕрмзрм┐рмХрм╛рм░ред',
        status: 'рмЖрмкрмгрмЩрнНрмХрм░ рмЖрммрнЗрмжрми рм╕рнНрмерм┐рмдрм┐ рмпрм╛рмЮрнНрмЪ рмХрм░рм┐рммрм╛рмХрнБ: 1) рмЖрмкрмгрмЩрнНрмХрм░ рмЖрммрнЗрмжрми ID рмжрм┐рмЕрмирнНрмдрнБ 2) Status Checker рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрнБред',
        documents: 'рмЖрммрм╢рнНрнЯрмХ рмжрм▓рм┐рм▓: 1) рмЖрмзрм╛рм░ рмХрм╛рм░рнНрмб 2) рмЬрмирмЬрм╛рмдрм┐ рмкрнНрм░рморм╛рмгрмкрмдрнНрм░ 3) рммрм╕рммрм╛рм╕ рмкрнНрм░рморм╛рмг 4) рмЬрморм┐ рмжрмЦрм▓рм░ рмкрнНрм░рморм╛рмгред',
        default: 'рморнБрмБ рммрми рмЕрмзрм┐рмХрм╛рм░ рмЕрмзрм┐рмирм┐рнЯрмо 2006 рм╕рморнНрммрмирнНрмзрнАрнЯ рм╕рморм╕рнНрмд рмдрмернНрнЯрм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рммрм┐ред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХрм░ рмкрнНрм░рм╢рнНрми рм╕рнНрмкрм╖рнНрмЯ рмХрм░рмирнНрмдрнБред'
      },
      te: {
        fra: 'р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓ р░Ър░Яр▒Нр░Яр░В 2006 р░Ер░Яр░╡р▒А р░ир░┐р░╡р░╛р░╕ р░╕р░ор░╛р░Ьр░╛р░▓р░Хр▒Б р░нр▒Вр░ор░┐ р░ор░░р░┐р░пр▒Б р░Ер░Яр░╡р▒А р░╡р░ир░░р▒Бр░▓р░кр▒И р░╣р░Хр▒Нр░Хр▒Бр░▓р░ир▒Б р░Хр░▓р▒Нр░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐ред р░Зр░жр░┐ р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (IFR), р░╕р░ор░╛р░Ьр░┐р░Х р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (CR), р░ор░░р░┐р░пр▒Б р░╕р░ор░╛р░Ьр░┐р░Х р░Ер░Яр░╡р▒А р░╡р░ир░░р▒Бр░▓ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (CFR)р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐ред',
        ifr: 'р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (IFR): 4 р░╣р▒Жр░Хр▒Нр░Яр░╛р░░р▒Нр░▓ р░╡р░░р░Хр▒Б р░╡р▒Нр░пр░╡р░╕р░╛р░п р░нр▒Вр░ор░┐р░Хр░┐ р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б. р░Ер░╡р░╕р░░р░В: р░ир░┐р░╡р░╛р░╕ р░░р▒Бр░Ьр▒Бр░╡р▒Б, р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░ир░┐ р░░р▒Бр░Ьр▒Бр░╡р▒Б, р░╕р░ор░╛р░Ьр░┐р░Х р░ор░жр▒Нр░жр░др▒Б.',
        cfr: 'р░╕р░ор░╛р░Ьр░┐р░Х р░Ер░Яр░╡р▒А р░╡р░ир░░р▒Бр░▓ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б (CFR): р░Ер░Яр░╡р▒А р░╡р░ир░░р▒Бр░▓ р░░р░Хр▒Нр░╖р░г, р░ир░┐р░░р▒Нр░╡р░╣р░г р░ор░░р░┐р░пр▒Б р░╡р░┐р░ир░┐р░пр▒Лр░Чр░╛р░ир░┐р░Хр░┐ р░╕р░ор░╛р░Ьр░┐р░Х р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б.',
        status: 'р░ор▒А р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б р░╕р▒Нр░ер░┐р░др░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐: 1) р░ор▒А р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б IDр░ир░┐ р░Зр░╡р▒Нр░╡р░Вр░бр░┐ 2) Status Checker р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐ред',
        documents: 'р░Ер░╡р░╕р░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р▒Б: 1) р░Жр░зр░╛р░░р▒Н р░Хр░╛р░░р▒Нр░бр▒Н 2) р░Чр░┐р░░р░┐р░Ьр░и р░╕р░░р▒Нр░Яр░┐р░лр░┐р░Хр▒Зр░Яр▒Н 3) р░ир░┐р░╡р░╛р░╕ р░░р▒Бр░Ьр▒Бр░╡р▒Б 4) р░нр▒Вр░ор░┐ р░╕р▒Нр░╡р░╛р░зр▒Ар░и р░░р▒Бр░Ьр▒Бр░╡р▒Б.',
        default: 'р░ир▒Зр░ир▒Б р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓ р░Ър░Яр▒Нр░Яр░В 2006 р░╕р░Вр░мр░Вр░зр░┐р░д р░Ер░ир▒Нр░ир░┐ р░╕р░ор░╛р░Ър░╛р░░р░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░╕р▒Нр░кр░╖р▒Нр░Яр░кр░░р░Ър░Вр░бр░┐.'
      },
      bn: {
        fra: 'ржмржи ржЕржзрж┐ржХрж╛рж░ ржЖржЗржи 2006 ржмржиржмрж╛рж╕рзА рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝ржЧрзБрж▓рж┐ржХрзЗ ржнрзВржорж┐ ржУ ржмржи рж╕ржорзНржкржжрзЗрж░ ржЙржкрж░ ржЕржзрж┐ржХрж╛рж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред ржПржЯрж┐ ржмрзНржпржХрзНрждрж┐ржЧржд ржмржи ржЕржзрж┐ржХрж╛рж░ (IFR), рж╕рж╛ржорж╛ржЬрж┐ржХ ржЕржзрж┐ржХрж╛рж░ (CR), ржПржмржВ рж╕рж╛ржорж╛ржЬрж┐ржХ ржмржи рж╕ржорзНржкржж ржЕржзрж┐ржХрж╛рж░ (CFR) рж╕рзНржмрзАржХрж╛рж░ ржХрж░рзЗред',
        ifr: 'ржмрзНржпржХрзНрждрж┐ржЧржд ржмржи ржЕржзрж┐ржХрж╛рж░ (IFR): рзк рж╣рзЗржХрзНржЯрж░ ржкрж░рзНржпржирзНржд ржХрзГрж╖рж┐ ржЬржорж┐рж░ ржЬржирзНржп ржмрзНржпржХрзНрждрж┐ржЧржд ржЕржзрж┐ржХрж╛рж░ред ржкрзНрж░ржпрж╝рзЛржЬржи: ржмрж╕ржмрж╛рж╕рзЗрж░ ржкрзНрж░ржорж╛ржг, ржХрзГрж╖рж┐ ржХрж╛ржЬрзЗрж░ ржкрзНрж░ржорж╛ржг, рж╕рж╛ржорж╛ржЬрж┐ржХ рж╕ржорж░рзНржержиред',
        cfr: 'рж╕рж╛ржорж╛ржЬрж┐ржХ ржмржи рж╕ржорзНржкржж ржЕржзрж┐ржХрж╛рж░ (CFR): ржмржи рж╕ржорзНржкржжрзЗрж░ рж╕рзБрж░ржХрзНрж╖рж╛, ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржУ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп рж╕рж╛ржорж╛ржЬрж┐ржХ ржЕржзрж┐ржХрж╛рж░ред',
        status: 'ржЖржкржирж╛рж░ ржЖржмрзЗржжржирзЗрж░ ржЕржмрж╕рзНржерж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рждрзЗ: рзз) ржЖржкржирж╛рж░ ржЖржмрзЗржжржи ID ржжрж┐ржи рзи) Status Checker ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред',
        documents: 'ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж╛ржЧржЬржкрждрзНрж░: рзз) ржЖржзрж╛рж░ ржХрж╛рж░рзНржб рзи) ржЙржкржЬрж╛рждрж┐ рж╕рж╛рж░рзНржЯрж┐ржлрж┐ржХрзЗржЯ рзй) ржмрж╕ржмрж╛рж╕рзЗрж░ ржкрзНрж░ржорж╛ржг рзк) ржЬржорж┐рж░ ржжржЦрж▓рзЗрж░ ржкрзНрж░ржорж╛ржгред',
        default: 'ржЖржорж┐ ржмржи ржЕржзрж┐ржХрж╛рж░ ржЖржЗржи 2006 рж╕ржорзНржкрж░рзНржХрж┐ржд рж╕ржорж╕рзНржд рждржерзНржпрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж╕рзНржкрж╖рзНржЯ ржХрж░рзБржиред'
      }
    };

    const langResponses = responses[language];
    
    // Check for specific keywords
    if (input.includes('forest rights act') || input.includes('fra') || input.includes('рд╡рди рдЕрдзрд┐рдХрд╛рд░') || 
        input.includes('рммрми рмЕрмзрм┐рмХрм╛рм░') || input.includes('р░Ер░Яр░╡р▒А р░╣р░Хр▒Нр░Хр▒Бр░▓') || input.includes('ржмржи ржЕржзрж┐ржХрж╛рж░')) {
      return langResponses.fra;
    }
    
    if (input.includes('individual forest rights') || input.includes('ifr') || input.includes('рд╡реНрдпрдХреНрддрд┐рдЧрдд') ||
        input.includes('рммрнНрнЯрмХрнНрмдрм┐рмЧрмд') || input.includes('р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д') || input.includes('ржмрзНржпржХрзНрждрж┐ржЧржд')) {
      return langResponses.ifr;
    }
    
    if (input.includes('community forest rights') || input.includes('cfr') || input.includes('рд╕рд╛рдореБрджрд╛рдпрд┐рдХ') ||
        input.includes('рм╕рморнНрмкрнНрм░рмжрм╛рнЯрм┐рмХ') || input.includes('р░╕р░ор░╛р░Ьр░┐р░Х') || input.includes('рж╕рж╛ржорж╛ржЬрж┐ржХ')) {
      return langResponses.cfr;
    }
    
    if (input.includes('status') || input.includes('application') || input.includes('рд╕реНрдерд┐рддрд┐') ||
        input.includes('рм╕рнНрмерм┐рмдрм┐') || input.includes('р░╕р▒Нр░ер░┐р░др░┐') || input.includes('ржЕржмрж╕рзНржерж╛')) {
      return langResponses.status;
    }
    
    if (input.includes('document') || input.includes('рджрд╕реНрддрд╛рд╡реЗрдЬрд╝') || input.includes('рмжрм▓рм┐рм▓') ||
        input.includes('р░кр░др▒Нр░░р░╛р░▓р▒Б') || input.includes('ржХрж╛ржЧржЬржкрждрзНрж░')) {
      return langResponses.documents;
    }
    
    return langResponses.default;
  };

  const handleQuickAction = (action: string) => {
    setInputValue(action);
    handleSendMessage();
  };

  const handleLanguageChange = (language: Language) => {
    setCurrentLanguage(language);
    setMessages([{
      id: '1',
      type: 'bot',
      content: languageContent[language].welcome,
      timestamp: new Date()
    }]);
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="h-14 w-14 rounded-full bg-government-orange hover:bg-government-orange/90 shadow-lg"
        >
          <MessageSquare className="h-6 w-6" />
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className={`w-96 shadow-xl ${isMinimized ? 'h-16' : 'h-[500px]'} transition-all duration-300`}>
        <CardHeader className="p-4 border-b">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 rounded-full bg-government-orange flex items-center justify-center">
                <Bot className="h-4 w-4 text-white" />
              </div>
              <div>
                <CardTitle className="text-sm">FRA Help Desk</CardTitle>
                <div className="flex items-center space-x-1">
                  <div className="w-2 h-2 rounded-full bg-green-500"></div>
                  <span className="text-xs text-muted-foreground">{languageContent[currentLanguage].online}</span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Select value={currentLanguage} onValueChange={handleLanguageChange}>
                <SelectTrigger className="w-20 h-8 text-xs">
                  <Languages className="h-3 w-3 mr-1" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="hi">рд╣рд┐рдВрджреА</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                  <SelectItem value="od">рмУрмбрм╝рм┐рмЖ</SelectItem>
                  <SelectItem value="te">р░др▒Жр░▓р▒Бр░Чр▒Б</SelectItem>
                  <SelectItem value="bn">ржмрж╛ржВрж▓рж╛</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMinimized(!isMinimized)}
              >
                <Minimize2 className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <CardContent className="p-0 flex flex-col h-[432px]">
            {/* Messages */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`flex items-start space-x-2 max-w-[80%] ${
                        message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                      }`}
                    >
                      <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                        message.type === 'user' 
                          ? 'bg-primary' 
                          : 'bg-government-orange'
                      }`}>
                        {message.type === 'user' ? (
                          <User className="h-3 w-3 text-white" />
                        ) : (
                          <Bot className="h-3 w-3 text-white" />
                        )}
                      </div>
                      <div
                        className={`rounded-lg p-3 ${
                          message.type === 'user'
                            ? 'bg-primary text-white'
                            : 'bg-muted'
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        <p className={`text-xs mt-1 ${
                          message.type === 'user' ? 'text-white/70' : 'text-muted-foreground'
                        }`}>
                          {message.timestamp.toLocaleTimeString([], { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>

            {/* Quick Actions */}
            {messages.length === 1 && (
              <div className="p-4 border-t bg-muted/30">
                <p className="text-xs text-muted-foreground mb-2">{languageContent[currentLanguage].quickHelp}</p>
                <div className="grid grid-cols-1 gap-1">
                  {languageContent[currentLanguage].quickActions.map((action, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      className="text-xs h-7 justify-start"
                      onClick={() => handleQuickAction(action)}
                    >
                      {action}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Input Area */}
            <div className="p-4 border-t">
              <div className="flex space-x-2">
                <Input
                  placeholder={languageContent[currentLanguage].placeholder}
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="flex-1"
                />
                <Button onClick={handleSendMessage} disabled={!inputValue.trim()}>
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              
              <div className="flex items-center justify-between mt-2">
                <div className="flex items-center space-x-2">
                  <Button variant="ghost" size="sm" className="text-xs">
                    <Phone className="h-3 w-3 mr-1" />
                    {languageContent[currentLanguage].callSupport}
                  </Button>
                  <Button variant="ghost" size="sm" className="text-xs">
                    <Mail className="h-3 w-3 mr-1" />
                    {languageContent[currentLanguage].email}
                  </Button>
                </div>
                <Badge variant="secondary" className="text-xs">
                  {languageContent[currentLanguage].support247}
                </Badge>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
};

export default ChatBot;